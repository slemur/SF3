/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FieldViewPanel.java
 *
 * Created on 15-jan-2012, 21:35:35
 */
package net.aurora.sorcery.ui.panel;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import net.aurora.sorcery.Sorcery;
import net.aurora.sorcery.bytecode.viewer.FieldFilter;
import net.aurora.sorcery.ui.SorceryUI;
import net.aurora.sorcery.ui.frame.ClassViewerForm;
import net.aurora.sorcery.ui.frame.FieldExplorerForm;
import serp.bytecode.BCField;

/**
 *
 * @author Devel
 */
public class FieldViewPanel extends javax.swing.JPanel {

    private BCField[] fields;
    private ClassViewerForm parent;

    /** Creates new form FieldViewPanel */
    public FieldViewPanel(ClassViewerForm parent) {
        initComponents();
        this.parent = parent;
        this.fields = parent.getContainedClass().getDeclaredFields();
        this.fieldTable.setModel(myFieldTableModel);
    }
    private DefaultTableModel myFieldTableModel = new DefaultTableModel() {

        private final String[] columns = {"Field name", "Type", "Access", "Value"};

        @Override
        public int getRowCount() {
            return fields != null ? fields.length : 0;
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int columnIndex) {
            return columns[columnIndex];
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            BCField selectedField = fields[rowIndex];
            switch (columnIndex) {
                case 0:
                    return selectedField.getName();

                case 1:
                    return selectedField.getTypeName();

                case 2:
                    return (selectedField.isPublic() ? "public " : "")
                            + (selectedField.isPrivate() ? "private " : "")
                            + (selectedField.isProtected() ? "protected " : "")
                            + (selectedField.isStatic() ? "static " : "")
                            + (selectedField.isFinal() ? "final " : "");

                case 3:
                    if (selectedField.isStatic()) {
                        Sorcery s = Sorcery.getSorcery();
                        try {
                            Class<?> clazz = s.getClassLoader().loadClass(parent.getContainedClass().getClassName());
                            Field field = clazz.getDeclaredField(selectedField.getName());
                            if (field != null) {
                                field.setAccessible(true);
                                return field.get(null);
                            }
                        } catch (Exception ex) {
                            Logger.getLogger(FieldViewPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    break;
            }
            return null;
        }
    };
    private FieldFilter myFieldFilter = new FieldFilter() {

        @Override
        public boolean accept(BCField field) {
            return ((field.isPublic() && publicChkBox.isSelected()) || (field.isPrivate() && privateChkBox.isSelected())
                    || (field.isProtected() && protectedChkBox.isSelected()) || (field.isFinal() && finalChkBox.isSelected())
                    || (field.isStatic() && staticChkBox.isSelected()))
                    && (fieldTypeTxt.getText().length() > 0 ? field.getTypeName().toLowerCase().contains(fieldTypeTxt.getText().toLowerCase()) : true);
        }
    };

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldCountLbl = new javax.swing.JLabel();
        memberFieldsLbl = new javax.swing.JLabel();
        classFieldsLbl = new javax.swing.JLabel();
        fieldCountTxt = new javax.swing.JLabel();
        memberFieldsTxt = new javax.swing.JLabel();
        classFieldsTxt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fieldTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        fieldTypeLbl = new javax.swing.JLabel();
        fieldTypeTxt = new javax.swing.JTextField();
        privateChkBox = new javax.swing.JCheckBox();
        publicChkBox = new javax.swing.JCheckBox();
        protectedChkBox = new javax.swing.JCheckBox();
        staticChkBox = new javax.swing.JCheckBox();
        finalChkBox = new javax.swing.JCheckBox();
        expandBtn = new javax.swing.JButton();

        fieldCountLbl.setText("Field count:");

        memberFieldsLbl.setText("Member fields:");

        classFieldsLbl.setText("Class fields:");

        fieldCountTxt.setText("jLabel1");

        memberFieldsTxt.setText("jLabel1");

        classFieldsTxt.setText("jLabel1");

        fieldTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        fieldTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fieldTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fieldTable);

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        fieldTypeLbl.setText("Field type:");

        privateChkBox.setSelected(true);
        privateChkBox.setText("Show private");

        publicChkBox.setSelected(true);
        publicChkBox.setText("Show public");

        protectedChkBox.setSelected(true);
        protectedChkBox.setText("Show protected");

        staticChkBox.setSelected(true);
        staticChkBox.setText("Show static");

        finalChkBox.setSelected(true);
        finalChkBox.setText("Show final");

        expandBtn.setText("Expand");
        expandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldCountLbl)
                    .addComponent(memberFieldsLbl)
                    .addComponent(classFieldsLbl))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classFieldsTxt)
                    .addComponent(memberFieldsTxt)
                    .addComponent(fieldCountTxt)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(privateChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(publicChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(protectedChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(staticChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finalChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldTypeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(expandBtn)
                .addGap(4, 4, 4)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldCountLbl)
                    .addComponent(fieldCountTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberFieldsLbl)
                    .addComponent(memberFieldsTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classFieldsLbl)
                    .addComponent(classFieldsTxt))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(privateChkBox)
                    .addComponent(publicChkBox)
                    .addComponent(protectedChkBox)
                    .addComponent(staticChkBox)
                    .addComponent(finalChkBox)
                    .addComponent(fieldTypeLbl)
                    .addComponent(fieldTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expandBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
    BCField[] fields = parent.getContainedClass().getDeclaredFields();
    ArrayList<BCField> filteredFields = new ArrayList<BCField>();

    for (BCField field : fields) {
        if (this.myFieldFilter.accept(field)) {
            filteredFields.add(field);
        }
    }
    this.fields = filteredFields.toArray(new BCField[filteredFields.size()]);
    ((DefaultTableModel) this.fieldTable.getModel()).fireTableDataChanged();
}//GEN-LAST:event_searchBtnActionPerformed

private void expandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandBtnActionPerformed
    try {
        Class<?> clazz = Sorcery.getSorcery().getClassLoader().loadClass(parent.getContainedClass().getClassName());
        Field field = clazz.getDeclaredField(this.fields[this.fieldTable.getSelectedRow()].getName());
        if (field != null) {
            field.setAccessible(true);
            SorceryUI.desktopPane.add(new FieldExplorerForm(field));
        }
    } catch (Exception ex) {
        Logger.getLogger(FieldViewPanel.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_expandBtnActionPerformed

private void fieldTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldTableMouseClicked
    BCField selectedField = fields[this.fieldTable.getSelectedRow()];
    expandBtn.setEnabled(selectedField.isStatic());
}//GEN-LAST:event_fieldTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel classFieldsLbl;
    private javax.swing.JLabel classFieldsTxt;
    private javax.swing.JButton expandBtn;
    private javax.swing.JLabel fieldCountLbl;
    private javax.swing.JLabel fieldCountTxt;
    private javax.swing.JTable fieldTable;
    private javax.swing.JLabel fieldTypeLbl;
    private javax.swing.JTextField fieldTypeTxt;
    private javax.swing.JCheckBox finalChkBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel memberFieldsLbl;
    private javax.swing.JLabel memberFieldsTxt;
    private javax.swing.JCheckBox privateChkBox;
    private javax.swing.JCheckBox protectedChkBox;
    private javax.swing.JCheckBox publicChkBox;
    private javax.swing.JButton searchBtn;
    private javax.swing.JCheckBox staticChkBox;
    // End of variables declaration//GEN-END:variables
}
